<!-- views/characters/partials/character-form-scripts.ejs -->
<script>
  // Handle image preview
  document.getElementById('avatarUrl').addEventListener('input', function(e) {
    const url = e.target.value.trim();
    const previewContainer = document.getElementById('avatar-preview');
    
    if (url) {
      previewContainer.innerHTML = `
        <img src="${url}" alt="Avatar Preview" style="width: 100%; height: 250px; object-fit: cover; border-radius: var(--radius-md);" onerror="imageLoadError(this)">
      `;
    } else {
      previewContainer.innerHTML = `<i class="fas fa-user-circle" style="font-size: 3rem; color: #999;"></i>`;
    }
  });
  
  function imageLoadError(img) {
    img.onerror = null;
    img.parentNode.innerHTML = `
      <div style="width: 100%; height: 250px; display: flex; flex-direction: column; align-items: center; justify-content: center; color: #999;">
        <i class="fas fa-exclamation-triangle" style="font-size: 2rem; margin-bottom: 10px;"></i>
        <span>Invalid image URL</span>
      </div>
    `;
  }
  
  function toggleTeamFields() {
    const role = document.getElementById('role').value;
    const teamFields = document.getElementById('teamFields');
    const playerFields = document.getElementById('playerFields');
    
    if (role === 'Player' || role === 'Staff') {
      teamFields.style.display = 'block';
      
      if (role === 'Player') {
        playerFields.style.display = 'block';
      } else {
        playerFields.style.display = 'none';
        // Clear player-specific fields when not in Player role
        if (document.getElementById('position')) {
          document.getElementById('position').value = '';
        }
        if (document.getElementById('jerseyNumber')) {
          document.getElementById('jerseyNumber').value = '';
        }
      }
    } else {
      teamFields.style.display = 'none';
      playerFields.style.display = 'none';
      
      // Clear team and player fields when in Civilian role
      if (document.getElementById('teamId')) {
        document.getElementById('teamId').value = '';
      }
      if (document.getElementById('position')) {
        document.getElementById('position').value = '';
      }
      if (document.getElementById('jerseyNumber')) {
        document.getElementById('jerseyNumber').value = '';
      }
    }
  }
  
  // Fixed tab functionality
  document.addEventListener('DOMContentLoaded', function() {
  // Tab functionality
  const tabLinks = document.querySelectorAll('.character-tab-link');
  const tabContents = document.querySelectorAll('.character-tab-pane');
  
  // Initialize tabs - hide all tab content first
  tabContents.forEach(tab => {
    tab.style.display = 'none';
  });
  
  // Show the first tab by default
  if (tabLinks.length > 0 && tabContents.length > 0) {
    tabLinks[0].classList.add('active');
    const firstTabId = tabLinks[0].getAttribute('href');
    const firstTab = document.querySelector(firstTabId);
    if (firstTab) {
      firstTab.style.display = 'block';
    }
  }
  
  // Add click handlers to tab links
  tabLinks.forEach(link => {
    link.addEventListener('click', function(e) {
      e.preventDefault();
      
      // Remove active class from all tabs and hide tab content
      tabLinks.forEach(l => l.classList.remove('active'));
      tabContents.forEach(t => {
        t.style.display = 'none';
      });
      
      // Add active class to clicked tab and show its content
      this.classList.add('active');
      const targetId = this.getAttribute('href');
      const targetTab = document.querySelector(targetId);
      if (targetTab) {
        targetTab.style.display = 'block';
      }
    });
  });
  
  // Team/Role fields visibility toggle
  const roleSelect = document.getElementById('role');
  if (roleSelect) {
    roleSelect.addEventListener('change', toggleTeamFields);
    // Initialize on page load
    toggleTeamFields();
  }
  
  // Avatar preview handler
  const avatarInput = document.getElementById('avatarUrl');
  if (avatarInput) {
    // Initialize preview if there's an existing URL
    if (avatarInput.value) {
      updateAvatarPreview(avatarInput.value);
    }
    
    // Add listener for changes
    avatarInput.addEventListener('input', function(e) {
      updateAvatarPreview(this.value.trim());
    });
  }
});

  function toggleCharacterTab(tabId, event) {
    if (event) event.preventDefault();
    
    // Hide all tab content
    document.querySelectorAll('.character-tab-content').forEach(content => {
      content.style.display = 'none';
    });
    
    // Remove active class from all tab links
    document.querySelectorAll('.character-tab-link').forEach(link => {
      link.classList.remove('active');
    });
    
    // Show the selected tab content and mark tab as active
    document.getElementById(tabId).style.display = 'block';
    event.target.classList.add('active');
    
    // This is the important fix - we need to enable only one character2Id field at a time
    if (tabId === 'myCharacters') {
      // Enable the dropdown for user's own characters, disable the other
      document.getElementById('character2Id_own').setAttribute('name', 'character2Id');
      document.getElementById('character2Id_own').disabled = false;
      
      if (document.getElementById('character2Id_other')) {
        document.getElementById('character2Id_other').removeAttribute('name');
        document.getElementById('character2Id_other').disabled = true;
      }
    } else {
      // Enable the dropdown for other players' characters, disable the user's own
      if (document.getElementById('character2Id_other')) {
        document.getElementById('character2Id_other').setAttribute('name', 'character2Id');
        document.getElementById('character2Id_other').disabled = false;
      }
      
      document.getElementById('character2Id_own').removeAttribute('name');
      document.getElementById('character2Id_own').disabled = true;
    }
  }

  // Make sure this function runs on page load to set the initial state correctly
  document.addEventListener('DOMContentLoaded', function() {
    // Set initial tab state - by default "myCharacters" should be active
    const activeTab = document.querySelector('.character-tab-link.active');
    if (activeTab) {
      const tabId = activeTab.getAttribute('href').substring(1); // Remove the # from the href
      toggleCharacterTab(tabId, { preventDefault: () => {}, target: activeTab });
    }
  });
</script>

<style>
  .character-tab-links {
    display: flex;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    margin-bottom: 20px;
  }
  
  .character-tab-link {
    padding: 10px 20px;
    color: var(--lighttext);
    font-weight: var(--medium);
    border-bottom: 3px solid transparent;
    transition: all var(--transition-fast);
  }
  
  .character-tab-link:hover {
    color: var(--header);
  }
  
  .character-tab-link.active {
    color: var(--header);
    border-bottom-color: var(--header);
  }
  
  .character-tab-pane {
    display: none;
  }
  
  .character-tab-pane.active {
    display: block;
  }

  .show-team-fields {
    display: block;
  }

  .hide-team-fields {
    display: none;
  }

  .show-player-fields {
    display: block;
  }

  .hide-player-fields {
    display: none;
  }
</style>